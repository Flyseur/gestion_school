# Generated by Django 5.1.4 on 2025-01-03 03:12

import core.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Classe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('niveau', models.CharField(max_length=50)),
                ('annee_scolaire', models.CharField(max_length=9)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Matiere',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('coefficient', models.IntegerField(default=1)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('telephone', models.CharField(blank=True, max_length=15, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profile_photos/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Administrator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telephone', models.CharField(blank=True, max_length=15, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Evenement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('date_debut', models.DateTimeField()),
                ('date_fin', models.DateTimeField()),
                ('lieu', models.CharField(max_length=100)),
                ('classes', models.ManyToManyField(blank=True, to='core.classe')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('date_sent', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_sent'],
            },
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matricule', models.CharField(max_length=20, unique=True)),
                ('specialite', models.CharField(max_length=100)),
                ('telephone', models.CharField(max_length=15)),
                ('matiere', models.CharField(max_length=100)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='professor_photos/')),
                ('classes', models.ManyToManyField(blank=True, related_name='professeurs', to='core.classe')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Professeur',
                'verbose_name_plural': 'Professeurs',
            },
        ),
        migrations.CreateModel(
            name='Cours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matiere', models.CharField(max_length=100)),
                ('jour', models.CharField(max_length=20)),
                ('heure_debut', models.TimeField()),
                ('heure_fin', models.TimeField()),
                ('commentaire', models.TextField(blank=True, null=True)),
                ('classe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.classe')),
                ('professeur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.professor')),
            ],
            options={
                'verbose_name': 'Cours',
                'verbose_name_plural': 'Cours',
                'ordering': ['jour', 'heure_debut'],
            },
        ),
        migrations.AddField(
            model_name='classe',
            name='professeur_principal',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='classes_dirigees', to='core.professor'),
        ),
        migrations.CreateModel(
            name='Rapport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=200)),
                ('type_rapport', models.CharField(choices=[('PRESENCE', 'Rapport de présence'), ('NOTE', 'Bulletin de notes'), ('PAIEMENT', 'État des paiements')], max_length=20)),
                ('date_generation', models.DateTimeField(auto_now_add=True)),
                ('fichier', models.FileField(blank=True, null=True, upload_to='rapports/')),
                ('classe', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.classe')),
            ],
            options={
                'verbose_name': 'Rapport',
                'verbose_name_plural': 'Rapports',
                'ordering': ['-date_generation'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matricule', models.CharField(max_length=20, unique=True)),
                ('date_naissance', models.DateField(validators=[core.models.validate_date_naissance])),
                ('adresse', models.TextField(help_text="Adresse complète de l'étudiant")),
                ('telephone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message="Le numéro de téléphone doit être au format '+243123456789'", regex='^\\+?1?\\d{9,15}$')])),
                ('photo', models.ImageField(blank=True, help_text="Photo de profil de l'étudiant (format JPEG ou PNG)", null=True, upload_to='student_photos/')),
                ('date_inscription', models.DateField(default=django.utils.timezone.now, help_text="Date d'inscription de l'étudiant")),
                ('actif', models.BooleanField(default=True, help_text="Indique si l'étudiant est actuellement inscrit")),
                ('classe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='etudiants', to='core.classe')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Étudiant',
                'verbose_name_plural': 'Étudiants',
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_paiement', models.CharField(choices=[('INSCRIPTION', "Frais d'inscription"), ('MENSUALITE', 'Mensualité'), ('EXAMEN', "Frais d'examen"), ('AUTRE', 'Autre')], max_length=20)),
                ('montant', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date_paiement', models.DateField(default=django.utils.timezone.now)),
                ('reference', models.CharField(default=uuid.uuid4, max_length=50, unique=True)),
                ('commentaire', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('EN_ATTENTE', 'En attente'), ('VALIDÉ', 'Validé'), ('ANNULÉ', 'Annulé')], default='EN_ATTENTE', max_length=20)),
                ('recu_par', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='paiements_recus', to=settings.AUTH_USER_MODEL)),
                ('etudiant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.student')),
            ],
            options={
                'verbose_name': 'Paiement',
                'verbose_name_plural': 'Paiements',
                'ordering': ['-date_paiement'],
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valeur', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('type_evaluation', models.CharField(choices=[('DEVOIR', 'Devoir'), ('EXAMEN', 'Examen'), ('PROJET', 'Projet')], max_length=20)),
                ('date', models.DateField()),
                ('commentaire', models.TextField(blank=True)),
                ('cours', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='core.cours')),
                ('etudiant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.student')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=200)),
                ('type_document', models.CharField(choices=[('BULLETIN', 'Bulletin de notes'), ('CERTIFICAT', 'Certificat de scolarité'), ('ATTESTATION', 'Attestation'), ('AUTRE', 'Autre')], max_length=20)),
                ('fichier', models.FileField(upload_to='documents/')),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(blank=True)),
                ('etudiant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='core.student')),
            ],
        ),
        migrations.CreateModel(
            name='Absence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_absence', models.DateField()),
                ('heure_debut', models.TimeField(default='08:00')),
                ('heure_fin', models.TimeField(default='09:00')),
                ('justifie', models.BooleanField(default=False)),
                ('motif', models.TextField(blank=True, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_modification', models.DateTimeField(auto_now=True)),
                ('cours', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='absences', to='core.cours')),
                ('etudiant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='absences', to='core.student')),
            ],
            options={
                'verbose_name': 'Absence',
                'verbose_name_plural': 'Absences',
                'ordering': ['-date_absence'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('student', 'Étudiant'), ('professor', 'Professeur'), ('administrator', 'Administrateur')], max_length=20)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Presence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('heure_arrivee', models.TimeField(auto_now_add=True)),
                ('classe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='presences', to='core.classe')),
                ('etudiant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='presences', to='core.student')),
            ],
            options={
                'verbose_name': 'Présence',
                'verbose_name_plural': 'Présences',
                'ordering': ['-date', 'etudiant__user__last_name'],
                'unique_together': {('etudiant', 'date')},
            },
        ),
    ]
